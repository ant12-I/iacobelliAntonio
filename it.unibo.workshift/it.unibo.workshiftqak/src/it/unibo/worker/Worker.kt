/* Generated by AN DISI Unibo */ 
package it.unibo.worker

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Worker ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var WorkshiftTime = 4000L   
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="handleMessagesm1", cond=doswitch() )
				}	 
				state("handleMessagesm1") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("Working in the morning.")
						stateTimer = TimerActor("timer_handleMessagesm1", 
							scope, context!!, "local_tout_worker_handleMessagesm1", WorkshiftTime )
					}
					 transition(edgeName="t00",targetState="handleMessagesm2",cond=whenTimeout("local_tout_worker_handleMessagesm1"))   
					transition(edgeName="t01",targetState="handleMessagesm1",cond=whenDispatch("m1"))
				}	 
				state("handleMessagesm2") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("Working in the afternoon.")
						stateTimer = TimerActor("timer_handleMessagesm2", 
							scope, context!!, "local_tout_worker_handleMessagesm2", WorkshiftTime )
					}
					 transition(edgeName="t02",targetState="sleeping",cond=whenTimeout("local_tout_worker_handleMessagesm2"))   
					transition(edgeName="t03",targetState="handleMessagesm2",cond=whenDispatch("m2"))
				}	 
				state("sleeping") { //this:State
					action { //it:State
						println("Sleeping...")
						stateTimer = TimerActor("timer_sleeping", 
							scope, context!!, "local_tout_worker_sleeping", WorkshiftTime )
					}
					 transition(edgeName="t04",targetState="handleMessagesm1",cond=whenTimeout("local_tout_worker_sleeping"))   
				}	 
			}
		}
}
